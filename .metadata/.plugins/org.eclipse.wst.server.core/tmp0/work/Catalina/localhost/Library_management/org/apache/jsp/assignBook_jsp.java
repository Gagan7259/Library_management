/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/10.0.27
 * Generated at: 2025-07-20 04:17:40 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp;

import jakarta.servlet.*;
import jakarta.servlet.http.*;
import jakarta.servlet.jsp.*;
import java.sql.*;
import com.connection.DbConnection;

public final class assignBook_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final jakarta.servlet.jsp.JspFactory _jspxFactory =
          jakarta.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("java.sql");
    _jspx_imports_packages.add("jakarta.servlet");
    _jspx_imports_packages.add("jakarta.servlet.http");
    _jspx_imports_packages.add("jakarta.servlet.jsp");
    _jspx_imports_classes = new java.util.HashSet<>();
    _jspx_imports_classes.add("com.connection.DbConnection");
  }

  private volatile jakarta.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public jakarta.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final jakarta.servlet.http.HttpServletRequest request, final jakarta.servlet.http.HttpServletResponse response)
      throws java.io.IOException, jakarta.servlet.ServletException {

    if (!jakarta.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSPs only permit GET, POST or HEAD. Jasper also permits OPTIONS");
        return;
      }
    }

    final jakarta.servlet.jsp.PageContext pageContext;
    jakarta.servlet.http.HttpSession session = null;
    final jakarta.servlet.ServletContext application;
    final jakarta.servlet.ServletConfig config;
    jakarta.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    jakarta.servlet.jsp.JspWriter _jspx_out = null;
    jakarta.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Assigned Books</title>\r\n");
      out.write("<style>\r\n");
      out.write("table, th, td {\r\n");
      out.write("	border: 1px solid black;\r\n");
      out.write("	padding: 8px;\r\n");
      out.write("	border-collapse: collapse;\r\n");
      out.write("}\r\n");
      out.write("\r\n");
      out.write("th {\r\n");
      out.write("	background-color: #f2f2f2;\r\n");
      out.write("}\r\n");
      out.write("</style>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("\r\n");
      out.write("	<h1>Assign Books to User</h1>\r\n");
      out.write("	<form action=\"AssignBooksSevlet\" method=\"post\">\r\n");
      out.write("		User ID: <input type=\"number\" required name=\"userid\"> <br>\r\n");
      out.write("		<br> Book ID: <input type=\"number\" required name=\"bookid\"><br>\r\n");
      out.write("		<br> Title: <input type=\"text\" required name=\"title\"><br>\r\n");
      out.write("		<br> Author: <input type=\"text\" required name=\"author\"><br>\r\n");
      out.write("		<br> Assign Date: <input type=\"date\" required name=\"assignDate\"><br>\r\n");
      out.write("		<br> Return Date: <input type=\"date\" required name=\"retunDate\"><br>\r\n");
      out.write("		<br>\r\n");
      out.write("\r\n");
      out.write("		<!-- Hidden field to mark status -->\r\n");
      out.write("		<input type=\"hidden\" name=\"avilable\" value=\"Assigned\"> <input\r\n");
      out.write("			type=\"submit\" value=\"Assign Book\">\r\n");
      out.write("	</form>\r\n");
      out.write("\r\n");
      out.write("	<hr>\r\n");
      out.write("\r\n");
      out.write("	<!-- Assigned Books Table -->\r\n");
      out.write("	<h2>Assigned Books</h2>\r\n");
      out.write("	<table>\r\n");
      out.write("		<tr>\r\n");
      out.write("			<th>ID</th>\r\n");
      out.write("			<th>User ID</th>\r\n");
      out.write("			<th>Book ID</th>\r\n");
      out.write("			<th>Assign Date</th>\r\n");
      out.write("			<th>Return Date</th>\r\n");
      out.write("			<th>Status</th>\r\n");
      out.write("		</tr>\r\n");
      out.write("\r\n");
      out.write("		");

		try {
			Connection con = DbConnection.getConnection();
			Statement st = con.createStatement();
			ResultSet rs = st.executeQuery("SELECT * FROM assignBooks");

			while (rs.next()) {
				int id = rs.getInt("id");
				int userId = rs.getInt("user_id");
				int bookId = rs.getInt("book_id");
				Date assignDate = rs.getDate("assign_date");
				Date returnDate = rs.getDate("return_date");

				String status = (returnDate != null) ? "Not Returned" : " Returned";
		
      out.write("\r\n");
      out.write("		<tr>\r\n");
      out.write("			<td>");
      out.print(id);
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(userId);
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(bookId);
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(assignDate);
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(returnDate);
      out.write("</td>\r\n");
      out.write("			<td>");
      out.print(status);
      out.write("</td>\r\n");
      out.write("		</tr>\r\n");
      out.write("		");

		}
		} catch (Exception e) {
		out.println("Error: " + e.getMessage());
		}
		
      out.write("\r\n");
      out.write("	</table>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>\r\n");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof jakarta.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
